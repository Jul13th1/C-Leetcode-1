一.常见10个问题
1.在qt当中，多线程环境下，信号和槽分别在什么样的线程中执行，如何控制？
    通过connect（.....）第五个参数控制信号和槽执行所在线程
    connect 它的连接方式：队列连接，自动连接和直接连接
    队列连接：Qt::QueueConnection
    自动连接：Qt::AutoCoonection
    直接连接：Qt::DirectConnection

2.在Qt开发当中，UDP当中的UdpSocket通讯流程？
    在Qt当中提供QUdpSocket类来进行UDP数据报发送和接受（IP地址和端口号）。
    流程：1.创建QUdpSocket套接字对象
         2.如果需要接收数据，必须绑定端口
         3.发送数据使用writeDatagram 接受数据使用read

3.在Qt开发当中，TCP通讯协议流程？
    服务器端：
        监听端口：服务器创建一个 QTcpServer 对象，用于监听指定的端口，等待客户端连接。
        接受连接：当客户端连接请求到来时，服务器通过 QTcpServer::nextPendingConnection() 方法接受连接，返回一个新的 QTcpSocket 对象，代表与客户端的连接。
        读取数据：服务器使用 QTcpSocket::read() 或 QTcpSocket::readAll() 等方法读取从客户端发送的数据。
        发送数据：服务器可以通过 QTcpSocket::write() 向客户端发送数据。
        关闭连接：通信完成后，服务器使用 QTcpSocket::close() 关闭连接。
    客户端：
        连接服务器：客户端使用 QTcpSocket 创建连接，并使用 QTcpSocket::connectToHost() 连接到服务器。
        发送数据：客户端通过 QTcpSocket::write() 向服务器发送数据。
        读取数据：客户端可以通过 QTcpSocket::read() 或 QTcpSocket::readAll() 等方法接收服务器发送的数据。
        关闭连接：通信结束后，客户端使用 QTcpSocket::close() 关闭连接。

4.QT信号与槽的优缺点？、
    优点：
        简洁与直观
        解耦
        线程安全
        自动管理内存
        灵活易拓展
        类型安全
    缺点：
        性能开销 速度比较慢
        调试困难
        有一定类型的限制

5.Qt当中 文件流（QTextStream）和数据流（QDataStream）区别？
    特性	        QTextStream         	QDataStream
    用途	         处理文本数据	          处理二进制数据
    数据格式	     文本文件，可读	          二进制文件，不可读
    支持编码	支持字符编码（如 UTF-8）	不支持字符编码，处理二进制数据
    格式化	 支持格式化输出（如数字、日期等）	  不支持格式化输出
    跨平台	 跨平台支持好，处理换行符差异	  跨平台支持好，自动处理字节顺序
    应用场景	配置文件、日志文件等文本数据	二进制数据存储、网络通信、数据库等

6.在Qt中.exec和show的区别?
    exec(): 使窗口进入事件循环，通常用于模态对话框。调用 exec() 后，程序会等待用户与窗口交互并关闭窗口后才会继续执行后续代码。适用于需要用户响应并阻止继续执行的情况。
    show(): 显示窗口，但不会阻止后续代码的执行。调用 show() 后，窗口将显示出来，程序会继续执行后续代码，适用于非模态窗口，如主窗口或子窗口。

    总结：exec() 用于模态窗口，阻塞程序；show() 用于非模态窗口，程序不被阻塞。
