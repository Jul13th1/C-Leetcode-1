///进程间通信
一.无名管道 
    使用fork()或者vfork()创建父子进程
    1.使用fork(): 对应代码文件fork.c 父子进程进行相互通信doublefork.c
        fork()的特点：
        （1）复制行为：创建一个新的进程，父进程所有的内存空间（堆 栈）都会被复制到子进程里面
                注意：可以使用写时复制机制，以优化内存的使用
        （2）性能：由于复制内存，fork在性能上开销相对较大
        （3）父子进程行为：父进程和子进程独立运行，可以同时运行(对应代码文件meanforktime.c)
        （4）使用场景：一般情况下，适合需要并行执行的场景

        获取父子进程的getpid() 子进程比父进程大1个
    2.使用vfork()：对应代码vfork.c
        vfork()的特点：
        （1）复制行为：创建一个新的进程，但不复制进程的内存空间
                    子进程在执行期间共享父进程的地址空间，直到调用exec或exit
        （2）性能：由于不复制内存，vfork通常比fork快
        （3）父子进程行为：子进程在执行时会阻塞父进程，直到子进程调用exec或exit
            在此期间，父进程不能修改其内存空间，因为子进程共享了父进程的地址空间
        （4）使用场景：适合在创建子进程后立即调用exec的场景，减少了不必要的内存开销
二.有名管道
    A.使用一个管道进行通信 一个代码文件进行写(onewritefifo.c) 另一个进行读(onereadfifo.c)
        在使用有名管道时，确保至少有一个进程在读取管道中的数据，否则写入操作会阻塞（所以上面代码先运行读操作代码）。
    特点：
        1：有可见的本地文件 保存交互信息
        2：可以在两个不相关的程序之间进行通信
        3：这个文件不会被删除，下次可以继续使用
    与无名管道的区别
        （1）命名：
            有名管道：在文件系统中有一个名字，进程可以通过该名字访问，可以在不同进程之间进行通信
            无名管道：没有名字，通常只能在父子进程之间访问，使用周期与创建它的进程相关
        （2）可见性：
            有名管道：在文件系统中存在，任何进程都可以通过路径名访问
            无名管道：仅在创建它的进程中可用，无法通过系统文件访问
        （3）使用场景
            有名管道：使用于需要多个不相关进程之间的通信
            无名管道：适用于父子进程之间的临时通信
    
    B.使用两个管道进行通信 第一条管道代码程序(doublefifo1.c) 第二条管道代码程序(doublefifo2.c)
三.信号
    一种用于通知进程发生某种事件的机制。
    信号可以是异步的，用于处理异步事件。
四.消息队列
    管道数据没有类型区别，没有格式，导致管道数据只有在读出来之后才能进行解析，所以有时候会取不到我们想要的数据类型
    1.概念：
        消息队列又称报文队列，又叫信箱，这种通信机制传递的数据具有某种结构。本质上其实是内核提供的链表，内核基于这个链表
        实现了一个数据结构。
        向消息队列中写数据，实际上是在像在这个数据结构中插入一个新节点，从消息队列汇总读数据，实际上是从这个数据结构中删除一个节点
        消息队列提供了一个从一个进程向另外一个进程发送一块数据的方法
        消息队列和管道也有一样的不足，每块数据块的最大长度是有限的，系统上全体队列的最大总长度也有一个上限
        在Linux中，单条消息的默认最大长度通常为 8192 字节
        在Linux中，管道的最大缓冲区一般为 64 KB（65536 字节）
    2.特点：
        有类型 有格式
        异步通信：发送者和接收者可以在不同的时间运行。
        优先级支持：消息可以设置优先级，允许高优先级消息先处理。
        消息管理：支持多条消息，可以根据需要查询和删除消息。
        结构化数据：每条消息可以包含结构化数据，方便组织信息。
    3.发送端代码示例：sendmsgdeque.c

    消息可以按照优先级处理，灵活性较高。
五.信号量
    信号量一次PV操作时加减的数值，一般只会用到两个值，一个是“－1”，也就是P操作(小于等于0 进程会被阻塞)，等待信号量变得可用；另一个是“＋1”，也就是我们的V操作，发出信号量已经变得可用
六.共享内存
    共享内存允许两个不相关的进程访问同一个逻辑内存，他是最常用的IPC，最快的IPC，直接将物理地址映射给他（内存条代表物理地址大小）
    sharememory.c sharememory1.c
    1.创建共享内存：一个进程使用 shmget() 创建共享内存，并获得其ID。
    2.附加共享内存：两个进程使用 shmat() 将共享内存附加到自己的地址空间。传递相同的ID时，它们会映射到同一块物理内存。

总结：
    1.无名管道（Pipe）：
        单向通信，数据从一个进程流向另一个进程。
        常用于父子进程之间的数据传递。
    2.命名管道（Named Pipe）：
        也称为 FIFO，允许无关进程之间的通信。
        通过系统中的文件路径进行访问。
    3.消息队列（Message Queue）：
        允许进程以消息的形式进行通信。
        消息可以按照优先级处理，灵活性较高。
    4.共享内存（Shared Memory）：
        多个进程可以访问同一块内存区域。
        速度快，但需要额外的同步机制来避免数据冲突。
    5.信号（Signal）：
        一种用于通知进程发生某种事件的机制。
        信号可以是异步的，用于处理异步事件。
    6.套接字（Socket）：
        适用于网络中进程间的通信。
        支持不同主机上的进程通信，适用于客户端-服务器模型。


        